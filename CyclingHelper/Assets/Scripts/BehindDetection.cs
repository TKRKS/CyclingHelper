// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;

namespace Application {
	public class BehindDetection : MonoBehaviour {
		AudioSource engineSound;
		float closestDistance = 100000000.0f;
		Dictionary<int, GameObject> cars = new Dictionary<int, GameObject>();
		public BehindDetection () {
		}

		void Start() {
			engineSound = GameObject.Find ("Ambience").audio;
		}

		void Update() {
			closestDistance = 100000000.0f;
			if (cars.Count > 0) {
				foreach (KeyValuePair<int, GameObject> car in cars) {
					float distance = calculateDistance(car.Value.transform.position);
					if (distance < closestDistance) {
						closestDistance = distance;
					}
				}
			}
			if (closestDistance < 15) {
				engineSound.pitch = Remap (closestDistance, 0, 15, 3, 0);
			} else {
				engineSound.pitch = 0;
			}
			engineSound.volume = Remap (cars.Count, 0, 4, 0, 1);
		}

		void OnTriggerEnter (Collider collider) {
			Debug.Log ("Trigger on " + collider.name);
			if (collider.name.Contains("Car")) {
				cars.Add(collider.gameObject.GetHashCode(), collider.gameObject);
			}
		}

		void OnTriggerExit(Collider collider) {
			if (collider.name.Contains("Car")) {
				cars.Remove(collider.gameObject.GetHashCode());
			}		
		}

		float calculateDistance(Vector3 position) {
			Vector3 controllerPosition = GameObject.Find ("First Person Controller").transform.position;
			return (float) (Math.Pow (Math.Pow (position.x - controllerPosition.x, 2) 
								+ Math.Pow (position.y - controllerPosition.y, 2) 
								+ Math.Pow (position.z - controllerPosition.z, 2), ((double)1 / 2)));

		}

		float Remap (float value, float low1, float high1, float low2, float high2) {
			return low2 + (value - low1) * (high2 - low2) / (high1 - low1);
		}
	}
}

